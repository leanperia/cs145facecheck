"""
Django settings for facecheck project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#wygk@oy3!c+wvse8g^-*4_i6v494dvsjlkg_$m2b$($8vt@=1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'crispy_forms',
    'faces',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'facecheck.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'facecheck.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'upraket',
	'USER': 'leanperia',
	'PASSWORD': 'lean13131',
	'HOST': 'localhost',
	'PORT': '',
    }
}
"""

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Manila'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
#static files like CSS!
STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]

AUTH_USER_MODEL = 'faces.CustomUser'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'
LOGIN_URL = 'login/'

CRISPY_TEMPLATE_PACK = 'bootstrap4'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
MEDIA_URL = '/media/'

###############################################################################

import torch
import torchvision.transforms as transforms
import json
from facedetect.get_nets import PNet, RNet, ONet
from facedetect.model_irse import IR_50
from sklearn.externals import joblib

with open('media/knnclf_init.json','r') as f:
    t = json.load(f)
print("Now loading the kNN model trained on %s"%t['time_trained'])
knnclf_path = os.path.join(MEDIA_ROOT,t['filepath'])
KNN_CLASSIFIER = joblib.load(knnclf_path)
print("Finished.")

print("Now loading the pretrained InceptionResnet model.")
cnn_path = os.path.join(MEDIA_ROOT,'models/backbone_cnn.pth')
BACKBONE_CNN = IR_50([112,112])
BACKBONE_CNN.load_state_dict(torch.load(cnn_path))
BACKBONE_CNN.eval()
print("Finished.")

rgb_mean = [0.5, 0.5, 0.5]
rgb_std = [0.5, 0.5, 0.5]
IMG_TRANSFORM = transforms.Compose([transforms.ToTensor(), transforms.Normalize(mean=rgb_mean, std = rgb_std)])

PNET = PNet(os.path.join(MEDIA_ROOT,'models/'))
PNET.eval()
RNET = RNet(os.path.join(MEDIA_ROOT,'models/'))
RNET.eval()
ONET = ONet(os.path.join(MEDIA_ROOT,'models/'))
ONET.eval()
